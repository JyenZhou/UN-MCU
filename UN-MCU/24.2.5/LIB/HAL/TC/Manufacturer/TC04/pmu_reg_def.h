//----------------------------------------------------------------------
//         COPYRIGHT (C) 2022 TINYCHIP SEMICONDUCTOR                    
    //              CONFIDENTIAL & ALL RIGHTS RESERVED                      
//----------------------------------------------------------------------
// File name      : pmu_reg_def.h                                       
// Author         : mfpan                                               
// E-Mail         : mfpan@tinychip.com.cn                               
//----------------------------------------------------------------------
// Description    :                                                     
// Register Header File of PMU                                       
//----------------------------------------------------------------------
// Reversion History:                                                   
// 2022-10-21 17:24:13 -- automatically generated by reg_gen.pl Revision 1.11          
//----------------------------------------------------------------------

#ifndef   PMU_DEF_H__
#define   PMU_DEF_H__

// Register Offset Macro Definition
#define PMU_PMU_CTRL_OFFSET                                     0x0000
#define PMU_SLEEP_MODE_OFFSET                                   0x0004
#define PMU_TW_CTRL_OFFSET                                      0x0008
#define PMU_AWKUP_CTRL_OFFSET                                   0x000C
#define PMU_TEST_CTRL_OFFSET                                    0x0010

// Register Address Macro Definition
#define PMU_PMU_CTRL_ADDR                                       ( PMU_BASE_ADDR + PMU_PMU_CTRL_OFFSET)
#define PMU_SLEEP_MODE_ADDR                                     ( PMU_BASE_ADDR + PMU_SLEEP_MODE_OFFSET)
#define PMU_TW_CTRL_ADDR                                        ( PMU_BASE_ADDR + PMU_TW_CTRL_OFFSET)
#define PMU_AWKUP_CTRL_ADDR                                     ( PMU_BASE_ADDR + PMU_AWKUP_CTRL_OFFSET)
#define PMU_TEST_CTRL_ADDR                                      ( PMU_BASE_ADDR + PMU_TEST_CTRL_OFFSET)

// Register Field Macro Definition
#define PMU_PMU_CTRL_EFLASH_HWDSB_EN_SHIFT                     17
#define PMU_PMU_CTRL_EFLASH_HWDSB_EN_MASK                      0x00020000
#define PMU_PMU_CTRL_EFLASH_HWDSB_EN_SET(n)                    (((uint32_t)(n) << 17 ) & 0x00020000)
#define PMU_PMU_CTRL_EFLASH_HWDSB_EN_CLR                       0xFFFDFFFF

#define PMU_PMU_CTRL_SW_FORCE_HPRDY_SHIFT                      16
#define PMU_PMU_CTRL_SW_FORCE_HPRDY_MASK                       0x00010000
#define PMU_PMU_CTRL_SW_FORCE_HPRDY_SET(n)                     (((uint32_t)(n) << 16 ) & 0x00010000)
#define PMU_PMU_CTRL_SW_FORCE_HPRDY_CLR                        0xFFFEFFFF

#define PMU_PMU_CTRL_SW_HFRDY_CYCLE_SHIFT                      8
#define PMU_PMU_CTRL_SW_HFRDY_CYCLE_MASK                       0x00001F00
#define PMU_PMU_CTRL_SW_HFRDY_CYCLE_SET(n)                     (((uint32_t)(n) << 8  ) & 0x00001F00)
#define PMU_PMU_CTRL_SW_HFRDY_CYCLE_CLR                        0xFFFFE0FF

#define PMU_PMU_CTRL_SW_LDOHP_CYCLE_SHIFT                      0
#define PMU_PMU_CTRL_SW_LDOHP_CYCLE_MASK                       0x0000001F
#define PMU_PMU_CTRL_SW_LDOHP_CYCLE_SET(n)                     (((uint32_t)(n) << 0  ) & 0x0000001F)
#define PMU_PMU_CTRL_SW_LDOHP_CYCLE_CLR                        0xFFFFFFE0

#define PMU_SLEEP_MODE_SW_SLP_MODE_SHIFT                       0
#define PMU_SLEEP_MODE_SW_SLP_MODE_MASK                        0x00000003
#define PMU_SLEEP_MODE_SW_SLP_MODE_SET(n)                      (((uint32_t)(n) << 0  ) & 0x00000003)
#define PMU_SLEEP_MODE_SW_SLP_MODE_CLR                         0xFFFFFFFC

#define PMU_TW_CTRL_TW_BIAS_CYCLE_SHIFT                        4
#define PMU_TW_CTRL_TW_BIAS_CYCLE_MASK                         0x000000F0
#define PMU_TW_CTRL_TW_BIAS_CYCLE_SET(n)                       (((uint32_t)(n) << 4  ) & 0x000000F0)
#define PMU_TW_CTRL_TW_BIAS_CYCLE_CLR                          0xFFFFFF0F

#define PMU_TW_CTRL_TW_BIAS_EN_SHIFT                           3
#define PMU_TW_CTRL_TW_BIAS_EN_MASK                            0x00000008
#define PMU_TW_CTRL_TW_BIAS_EN_SET(n)                          (((uint32_t)(n) << 3  ) & 0x00000008)
#define PMU_TW_CTRL_TW_BIAS_EN_CLR                             0xFFFFFFF7

#define PMU_TW_CTRL_SW_TW_EN_SHIFT                             0
#define PMU_TW_CTRL_SW_TW_EN_MASK                              0x00000007
#define PMU_TW_CTRL_SW_TW_EN_SET(n)                            (((uint32_t)(n) << 0  ) & 0x00000007)
#define PMU_TW_CTRL_SW_TW_EN_CLR                               0xFFFFFFF8

#define PMU_AWKUP_CTRL_AON_IRSR_SHIFT                          12
#define PMU_AWKUP_CTRL_AON_IRSR_MASK                           0x00003000
#define PMU_AWKUP_CTRL_AON_IRSR_SET(n)                         (((uint32_t)(n) << 12 ) & 0x00003000)
#define PMU_AWKUP_CTRL_AON_IRSR_CLR                            0xFFFFCFFF

#define PMU_AWKUP_CTRL_AON_ISR_SHIFT                           8
#define PMU_AWKUP_CTRL_AON_ISR_MASK                            0x00000300
#define PMU_AWKUP_CTRL_AON_ISR_SET(n)                          (((uint32_t)(n) << 8  ) & 0x00000300)
#define PMU_AWKUP_CTRL_AON_ISR_CLR                             0xFFFFFCFF

#define PMU_AWKUP_CTRL_AON_IMR_SHIFT                           4
#define PMU_AWKUP_CTRL_AON_IMR_MASK                            0x00000030
#define PMU_AWKUP_CTRL_AON_IMR_SET(n)                          (((uint32_t)(n) << 4  ) & 0x00000030)
#define PMU_AWKUP_CTRL_AON_IMR_CLR                             0xFFFFFFCF

#define PMU_AWKUP_CTRL_AON_ICR_SHIFT                           0
#define PMU_AWKUP_CTRL_AON_ICR_MASK                            0x00000003
#define PMU_AWKUP_CTRL_AON_ICR_SET(n)                          (((uint32_t)(n) << 0  ) & 0x00000003)
#define PMU_AWKUP_CTRL_AON_ICR_CLR                             0xFFFFFFFC

#define PMU_TEST_CTRL_SW_SLP_REQ_SHIFT                         0
#define PMU_TEST_CTRL_SW_SLP_REQ_MASK                          0x00000001
#define PMU_TEST_CTRL_SW_SLP_REQ_SET(n)                        (((uint32_t)(n) << 0  ) & 0x00000001)
#define PMU_TEST_CTRL_SW_SLP_REQ_CLR                           0xFFFFFFFE

// Register Structure Definition
typedef struct
{
    __IO uint32_t SW_LDOHP_CYCLE  : 5  ; // 4  : 0 
    __IO uint32_t RESERVED2       : 3  ; // 7  : 5 
    __IO uint32_t SW_HFRDY_CYCLE  : 5  ; // 12 : 8 
    __IO uint32_t RESERVED1       : 3  ; // 15 : 13 
    __IO uint32_t SW_FORCE_HPRDY  : 1  ; // 16 : 16 
    __IO uint32_t EFLASH_HWDSB_EN : 1  ; // 17 : 17 
    __IO uint32_t RESERVED0       : 14 ; // 31 : 18 
} PMU_PMU_CTRL_FIELD_T;

typedef struct
{
    __IO uint32_t SW_SLP_MODE     : 2  ; // 1  : 0 
    __IO uint32_t RESERVED0       : 30 ; // 31 : 2 
} PMU_SLEEP_MODE_FIELD_T;

typedef struct
{
    __IO uint32_t SW_TW_EN        : 3  ; // 2  : 0 
    __IO uint32_t TW_BIAS_EN      : 1  ; // 3  : 3 
    __IO uint32_t TW_BIAS_CYCLE   : 4  ; // 7  : 4 
    __IO uint32_t RESERVED0       : 24 ; // 31 : 8 
} PMU_TW_CTRL_FIELD_T;

typedef struct
{
    __IO uint32_t AON_ICR         : 2  ; // 1  : 0 
    __IO uint32_t RESERVED3       : 2  ; // 3  : 2 
    __IO uint32_t AON_IMR         : 2  ; // 5  : 4 
    __IO uint32_t RESERVED2       : 2  ; // 7  : 6 
    __IO uint32_t AON_ISR         : 2  ; // 9  : 8 
    __IO uint32_t RESERVED1       : 2  ; // 11 : 10 
    __IO uint32_t AON_IRSR        : 2  ; // 13 : 12 
    __IO uint32_t RESERVED0       : 18 ; // 31 : 14 
} PMU_AWKUP_CTRL_FIELD_T;

typedef struct
{
    __IO uint32_t SW_SLP_REQ      : 1  ; // 0  : 0 
    __IO uint32_t RESERVED0       : 30 ; // 31 : 2 
} PMU_TEST_CTRL_FIELD_T;

// Register Map Structure Definition
typedef struct
{
    union 
    { 
        __IO  uint32_t PMU_CTRL                ; // 0x0000
        PMU_PMU_CTRL_FIELD_T PMU_CTRL_F        ;
    };

    union 
    { 
        __IO  uint32_t SLEEP_MODE              ; // 0x0004
        PMU_SLEEP_MODE_FIELD_T SLEEP_MODE_F    ;
    };

    union 
    { 
        __IO  uint32_t TW_CTRL                 ; // 0x0008
        PMU_TW_CTRL_FIELD_T TW_CTRL_F          ;
    };

    union 
    { 
        __IO  uint32_t AWKUP_CTRL              ; // 0x000C
        PMU_AWKUP_CTRL_FIELD_T AWKUP_CTRL_F    ;
    };

    union 
    { 
        __IO  uint32_t TEST_CTRL               ; // 0x0010
        PMU_TEST_CTRL_FIELD_T TEST_CTRL_F      ;
    };

} PMU_REG_TypeDef;

#endif
