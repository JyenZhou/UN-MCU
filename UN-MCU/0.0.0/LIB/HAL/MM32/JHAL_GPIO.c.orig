#include "../JHAL_GPIO.h"




//GPIO定义的转换
GPIO_TypeDef * __JHAL_jport2port(JHAL_IO_Port port )
{



    if(port==JHAL_IOA) {
        return  	 GPIOA;
    } else if(port==JHAL_IOB) {
        return  	 GPIOB;
    }
#ifndef   MM32G0001
    else if(port==JHAL_IOC) {
        return  	 GPIOC;
    } else if(port==JHAL_IOD) {
        return  	 GPIOD;
    } else if(port==JHAL_IOE) {
        return  	 GPIOE;
    }

    else if(port==JHAL_IOF) {
        return  	 GPIOF;
    } else if(port==JHAL_IOG) {
        return  	 GPIOG;
    }

#endif
    else {

        JHAL_Fault_Handler("__JHAL_jport2port");
        return  GPIOA;
    }

}
JHAL_IO_Port __JHAL_port2jport(GPIO_TypeDef * port )
{

    if(port==GPIOA ) {
        return  	 JHAL_IOA;
    } else if(port==GPIOB ) {
        return  	 JHAL_IOB;
    }
#ifndef   MM32G0001
    else if(port==GPIOC ) {
        return  	 JHAL_IOC;
    } else if(port==GPIOD ) {
        return  	 JHAL_IOD;
    } else if(port==GPIOE ) {
        return  	 JHAL_IOE;
    }

    else if(port==GPIOF ) {
        return  	 JHAL_IOF;
    } else if(port==GPIOG ) {
        return  	 JHAL_IOG;
    }
#endif
    else {

        JHAL_Fault_Handler("__JHAL_port2jport");
        return  	 JHAL_IOA;
    }


}



u16 __JHAL_jpin2pin ( u8 pin )
{


    return 1<< pin ;


}
u8  JHAL_pin2jpin ( u16 pin )
{

    int position = 0;
    while (!(pin & 0x01)) {
        pin >>= 1;
        position++;
    }

    return position;

}
//读取IO状态  true高电平 false低电平
bool  JHAL_gpioReadPin(JHAL_IO_Port port,u8 pin)
{

    return  GPIO_ReadInputDataBit(__JHAL_jport2port(port ),__JHAL_jpin2pin(pin));
}
//设置IO电平
void  JHAL_gpioWitePin(JHAL_IO_Port port,u8 pin,bool level)
{
    GPIO_WriteBit(__JHAL_jport2port(port ),__JHAL_jpin2pin(pin),(BitAction)level);
}
//gpio模式设置  0输入 1输出 2开漏

void  JHAL_gpioModeSet(JHAL_IO_Port port,u8 pin,u32 mode)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.GPIO_Pin = __JHAL_jpin2pin(pin);
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;

    EXTI_InitTypeDef EXTI_InitStruct;
    NVIC_InitTypeDef NVIC_InitStruct;


    if(JHAL_IOA==port)
    {
        RCC_AHBPeriphClockCmd(RCC_AHBENR_GPIOA, ENABLE);
    } else if(JHAL_IOB==port)
    {
        RCC_AHBPeriphClockCmd(RCC_AHBENR_GPIOB, ENABLE);
    } else {
        JHAL_Fault_Handler("JHAL_gpioModeSet_Port");
    }
JHAL_IOMODE_IO  io=  (JHAL_IOMODE_IO) (__JHAL_IOMODE_IO_Mask&mode);
		
    if(JHAL_IOMODE_IO_Input==io ) {

			
		JHAL_IOMODE_PullResistor  pullResistor=(JHAL_IOMODE_PullResistor)(	__JHAL_IOMODE_PullResistor_Mask&mode);
			if(pullResistor==JHAL_IOMODE_PullResistor_None)
			{
			    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_FLOATING;
			}else if(pullResistor==JHAL_IOMODE_PullResistor_Up)
			{
			    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
			}else 
			{
			    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
			}
			   GPIO_Init(__JHAL_jport2port(port ), &GPIO_InitStruct);
			
			
				JHAL_IOMODE_EXTI_Trigger  trigger= (JHAL_IOMODE_EXTI_Trigger)(__JHAL_IOMODE_EXTI_Trigger_Mask &mode);
			if(trigger==JHAL_IOMODE_EXTI_Trigger_High_Rising||JHAL_IOMODE_EXTI_Trigger_Low_Falling==trigger)
			 {
				JHAL_IOMODE_EXTI_TriggerMode  triggerMode =(JHAL_IOMODE_EXTI_TriggerMode)(__JHAL_IOMODE_EXTI_TriggerMode_Mask &mode);
				if(triggerMode!=JHAL_IOMODE_EXTI_TriggerMode_Edge)
				{
					//未实现
					 JHAL_Fault_Handler("JHAL_gpioModeSet_TriggerMode");
				}
        RCC_APB1PeriphClockCmd(RCC_APB1ENR_EXTI, ENABLE);
        RCC_APB1PeriphClockCmd(RCC_APB1ENR_SYSCFG, ENABLE);

        EXTI_StructInit(&EXTI_InitStruct);
        EXTI_InitStruct.EXTI_Line    =  __JHAL_jpin2pin(pin);;
        EXTI_InitStruct.EXTI_Mode    = EXTI_Mode_Interrupt;
        EXTI_InitStruct.EXTI_Trigger =JHAL_IOMODE_EXTI_Trigger_High_Rising==trigger? EXTI_Trigger_Rising:EXTI_Trigger_Falling;
        EXTI_InitStruct.EXTI_LineCmd = ENABLE;
        EXTI_Init(&EXTI_InitStruct);
        SYSCFG_EXTILineConfig(port, pin);	 
        NVIC_InitStruct.NVIC_IRQChannel = pin<2?EXTI0_1_IRQn : pin<4? EXTI2_3_IRQn:EXTI4_15_IRQn;
        NVIC_InitStruct.NVIC_IRQChannelPriority = 0x01;
        NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStruct);
			}
    

    } else if(io==JHAL_IOMODE_IO_OutputPushPull) {
			
        GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
			  GPIO_Init(__JHAL_jport2port(port ), &GPIO_InitStruct);

    } else  {

        GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_OD;
			  GPIO_Init(__JHAL_jport2port(port ), &GPIO_InitStruct);
    }  
 
		 
  

}


void EXTI2_3_IRQHandler(void)
{
	
	for(int i=0;i<24;i++)
	{
		   if (EXTI_GetITStatus(1<<i))
    {
      JHAL_gpio4IRKeyInterruptCallback();

        EXTI_ClearITPendingBit(1<<i);
    }
		
	}
  
}

void EXTI4_15_IRQHandler(void)
{

  	for(int i=0;i<24;i++)
	{
		   if (EXTI_GetITStatus(1<<i))
    {
      JHAL_gpio4IRKeyInterruptCallback();

        EXTI_ClearITPendingBit(1<<i);
    }
		
	}
  
}

