//----------------------------------------------------------------------
//         COPYRIGHT (C) 2022 TINYCHIP SEMICONDUCTOR                    
    //              CONFIDENTIAL & ALL RIGHTS RESERVED                      
//----------------------------------------------------------------------
// File name      : eflash_reg_def.h                                    
// Author         : mfpan                                               
// E-Mail         : mfpan@tinychip.com.cn                               
//----------------------------------------------------------------------
// Description    :                                                     
// Register Header File of EFLASH                                    
//----------------------------------------------------------------------
// Reversion History:                                                   
// 2022-10-21 17:24:11 -- automatically generated by reg_gen.pl Revision 1.11          
//----------------------------------------------------------------------

#ifndef   EFLASH_DEF_H__
#define   EFLASH_DEF_H__

// Register Offset Macro Definition
#define EFLASH_RCTC_OFFSET                                      0x0000
#define EFLASH_WCTC1_OFFSET                                     0x0004
#define EFLASH_WCTC2_OFFSET                                     0x0008
#define EFLASH_ECONF_OFFSET                                     0x000C
#define EFLASH_ECOMM_OFFSET                                     0x0010
#define EFLASH_MCR_OFFSET                                       0x0014
#define EFLASH_NVR_PROT_OFFSET                                  0x00FC

// Register Address Macro Definition
#define EFLASH_RCTC_ADDR                                        ( EFLASH_BASE_ADDR + EFLASH_RCTC_OFFSET)
#define EFLASH_WCTC1_ADDR                                       ( EFLASH_BASE_ADDR + EFLASH_WCTC1_OFFSET)
#define EFLASH_WCTC2_ADDR                                       ( EFLASH_BASE_ADDR + EFLASH_WCTC2_OFFSET)
#define EFLASH_ECONF_ADDR                                       ( EFLASH_BASE_ADDR + EFLASH_ECONF_OFFSET)
#define EFLASH_ECOMM_ADDR                                       ( EFLASH_BASE_ADDR + EFLASH_ECOMM_OFFSET)
#define EFLASH_MCR_ADDR                                         ( EFLASH_BASE_ADDR + EFLASH_MCR_OFFSET)
#define EFLASH_NVR_PROT_ADDR                                    ( EFLASH_BASE_ADDR + EFLASH_NVR_PROT_OFFSET)

// Register Field Macro Definition
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CONFEN_SHIFT                           8
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CONFEN_MASK                            0x00000300
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CONFEN_SET(n)                          (((uint32_t)(n) << 8  ) & 0x00000300)
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CONFEN_CLR                             0xFFFFFCFF

#define EFLASH_RCTC_CONFIG_CYCLE_OF_CFH_SHIFT                              6
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CFH_MASK                               0x000000C0
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CFH_SET(n)                             (((uint32_t)(n) << 6  ) & 0x000000C0)
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CFH_CLR                                0xFFFFFF3F

#define EFLASH_RCTC_CONFIG_CYCLE_OF_CFS_SHIFT                              4
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CFS_MASK                               0x00000030
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CFS_SET(n)                             (((uint32_t)(n) << 4  ) & 0x00000030)
#define EFLASH_RCTC_CONFIG_CYCLE_OF_CFS_CLR                                0xFFFFFFCF

#define EFLASH_RCTC_CONFIG_CYCLE_OF_RC_SHIFT                               0
#define EFLASH_RCTC_CONFIG_CYCLE_OF_RC_MASK                                0x0000000F
#define EFLASH_RCTC_CONFIG_CYCLE_OF_RC_SET(n)                              (((uint32_t)(n) << 0  ) & 0x0000000F)
#define EFLASH_RCTC_CONFIG_CYCLE_OF_RC_CLR                                 0xFFFFFFF0

#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_ECHIP_SHIFT                       22
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_ECHIP_MASK                        0xFFC00000
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_ECHIP_SET(n)                      (((uint32_t)(n) << 22 ) & 0xFFC00000)
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_ECHIP_CLR                         0x003FFFFF

#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_ESECT_SHIFT                       12
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_ESECT_MASK                        0x003FF000
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_ESECT_SET(n)                      (((uint32_t)(n) << 12 ) & 0x003FF000)
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_ESECT_CLR                         0xFFC00FFF

#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_PROG_SHIFT                        6
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_PROG_MASK                         0x00000FC0
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_PROG_SET(n)                       (((uint32_t)(n) << 6  ) & 0x00000FC0)
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_RCV_PROG_CLR                          0xFFFFF03F

#define EFLASH_WCTC1_CONFIG_CYCLE_OF_NVS_SHIFT                             0
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_NVS_MASK                              0x0000003F
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_NVS_SET(n)                            (((uint32_t)(n) << 0  ) & 0x0000003F)
#define EFLASH_WCTC1_CONFIG_CYCLE_OF_NVS_CLR                               0xFFFFFFC0

#define EFLASH_WCTC2_CONFIG_CYCLE_OF_LATENCY_SHIFT                         29
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_LATENCY_MASK                          0xE0000000
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_LATENCY_SET(n)                        (((uint32_t)(n) << 29 ) & 0xE0000000)
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_LATENCY_CLR                           0x1FFFFFFF

#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ERASE_CHIP_SHIFT                      21
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ERASE_CHIP_MASK                       0x1FE00000
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ERASE_CHIP_SET(n)                     (((uint32_t)(n) << 21 ) & 0x1FE00000)
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ERASE_CHIP_CLR                        0xE01FFFFF

#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ERASE_SECT_SHIFT                      16
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ERASE_SECT_MASK                       0x001F0000
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ERASE_SECT_SET(n)                     (((uint32_t)(n) << 16 ) & 0x001F0000)
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ERASE_SECT_CLR                        0xFFE0FFFF

#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PROG_SHIFT                            11
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PROG_MASK                             0x0000F800
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PROG_SET(n)                           (((uint32_t)(n) << 11 ) & 0x0000F800)
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PROG_CLR                              0xFFFF07FF

#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ADH_SHIFT                             9
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ADH_MASK                              0x00000600
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ADH_SET(n)                            (((uint32_t)(n) << 9  ) & 0x00000600)
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ADH_CLR                               0xFFFFF9FF

#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ADS_SHIFT                             7
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ADS_MASK                              0x00000180
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ADS_SET(n)                            (((uint32_t)(n) << 7  ) & 0x00000180)
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_ADS_CLR                               0xFFFFFE7F

#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PGH_SHIFT                             5
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PGH_MASK                              0x00000060
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PGH_SET(n)                            (((uint32_t)(n) << 5  ) & 0x00000060)
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PGH_CLR                               0xFFFFFF9F

#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PGS_SHIFT                             0
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PGS_MASK                              0x0000001F
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PGS_SET(n)                            (((uint32_t)(n) << 0  ) & 0x0000001F)
#define EFLASH_WCTC2_CONFIG_CYCLE_OF_PGS_CLR                               0xFFFFFFE0

#define EFLASH_ECONF_CONFIG_NVR_SELECT_SHIFT                               24
#define EFLASH_ECONF_CONFIG_NVR_SELECT_MASK                                0x01000000
#define EFLASH_ECONF_CONFIG_NVR_SELECT_SET(n)                              (((uint32_t)(n) << 24 ) & 0x01000000)
#define EFLASH_ECONF_CONFIG_NVR_SELECT_CLR                                 0xFEFFFFFF

#define EFLASH_ECONF_CONFIG_SECTOR_INDEX_SHIFT                             0
#define EFLASH_ECONF_CONFIG_SECTOR_INDEX_MASK                              0x0000007F
#define EFLASH_ECONF_CONFIG_SECTOR_INDEX_SET(n)                            (((uint32_t)(n) << 0  ) & 0x0000007F)
#define EFLASH_ECONF_CONFIG_SECTOR_INDEX_CLR                               0xFFFFFF80

#define EFLASH_ECOMM_CMD_CHIP_ERASE_SHIFT                                  16
#define EFLASH_ECOMM_CMD_CHIP_ERASE_MASK                                   0x00010000
#define EFLASH_ECOMM_CMD_CHIP_ERASE_SET(n)                                 (((uint32_t)(n) << 16 ) & 0x00010000)
#define EFLASH_ECOMM_CMD_CHIP_ERASE_CLR                                    0xFFFEFFFF

#define EFLASH_ECOMM_CMD_SECTOR_ERASE_SHIFT                                0
#define EFLASH_ECOMM_CMD_SECTOR_ERASE_MASK                                 0x00000001
#define EFLASH_ECOMM_CMD_SECTOR_ERASE_SET(n)                               (((uint32_t)(n) << 0  ) & 0x00000001)
#define EFLASH_ECOMM_CMD_SECTOR_ERASE_CLR                                  0xFFFFFFFE

#define EFLASH_MCR_STAT_ERASE_BUSY_SHIFT                                   18
#define EFLASH_MCR_STAT_ERASE_BUSY_MASK                                    0x00040000
#define EFLASH_MCR_STAT_ERASE_BUSY_SET(n)                                  (((uint32_t)(n) << 18 ) & 0x00040000)
#define EFLASH_MCR_STAT_ERASE_BUSY_CLR                                     0xFFFBFFFF

#define EFLASH_MCR_STAT_PROGRAM_BUSY_SHIFT                                 16
#define EFLASH_MCR_STAT_PROGRAM_BUSY_MASK                                  0x00010000
#define EFLASH_MCR_STAT_PROGRAM_BUSY_SET(n)                                (((uint32_t)(n) << 16 ) & 0x00010000)
#define EFLASH_MCR_STAT_PROGRAM_BUSY_CLR                                   0xFFFEFFFF

#define EFLASH_MCR_CONFIG_CLK1K_DIVISOR_SHIFT                              8
#define EFLASH_MCR_CONFIG_CLK1K_DIVISOR_MASK                               0x00001F00
#define EFLASH_MCR_CONFIG_CLK1K_DIVISOR_SET(n)                             (((uint32_t)(n) << 8  ) & 0x00001F00)
#define EFLASH_MCR_CONFIG_CLK1K_DIVISOR_CLR                                0xFFFFE0FF

#define EFLASH_MCR_CONFIG_CLK1M_DIVISOR_SHIFT                              4
#define EFLASH_MCR_CONFIG_CLK1M_DIVISOR_MASK                               0x000000F0
#define EFLASH_MCR_CONFIG_CLK1M_DIVISOR_SET(n)                             (((uint32_t)(n) << 4  ) & 0x000000F0)
#define EFLASH_MCR_CONFIG_CLK1M_DIVISOR_CLR                                0xFFFFFF0F

#define EFLASH_MCR_CONFIG_DEEP_STANDBY_SHIFT                               0
#define EFLASH_MCR_CONFIG_DEEP_STANDBY_MASK                                0x00000001
#define EFLASH_MCR_CONFIG_DEEP_STANDBY_SET(n)                              (((uint32_t)(n) << 0  ) & 0x00000001)
#define EFLASH_MCR_CONFIG_DEEP_STANDBY_CLR                                 0xFFFFFFFE

// Register Structure Definition
typedef struct
{
    __IO uint32_t CONFIG_CYCLE_OF_RC         : 4  ; // 3  : 0 
    __IO uint32_t CONFIG_CYCLE_OF_CFS        : 2  ; // 5  : 4 
    __IO uint32_t CONFIG_CYCLE_OF_CFH        : 2  ; // 7  : 6 
    __IO uint32_t CONFIG_CYCLE_OF_CONFEN     : 2  ; // 9  : 8 
    __IO uint32_t RESERVED0                  : 22 ; // 31 : 10 
} EFLASH_RCTC_FIELD_T;

typedef struct
{
    __IO uint32_t CONFIG_CYCLE_OF_NVS        : 6  ; // 5  : 0 
    __IO uint32_t CONFIG_CYCLE_OF_RCV_PROG   : 6  ; // 11 : 6 
    __IO uint32_t CONFIG_CYCLE_OF_RCV_ESECT  : 10 ; // 21 : 12 
    __IO uint32_t CONFIG_CYCLE_OF_RCV_ECHIP  : 10 ; // 31 : 22 
} EFLASH_WCTC1_FIELD_T;

typedef struct
{
    __IO uint32_t CONFIG_CYCLE_OF_PGS        : 5  ; // 4  : 0 
    __IO uint32_t CONFIG_CYCLE_OF_PGH        : 2  ; // 6  : 5 
    __IO uint32_t CONFIG_CYCLE_OF_ADS        : 2  ; // 8  : 7 
    __IO uint32_t CONFIG_CYCLE_OF_ADH        : 2  ; // 10 : 9 
    __IO uint32_t CONFIG_CYCLE_OF_PROG       : 5  ; // 15 : 11 
    __IO uint32_t CONFIG_CYCLE_OF_ERASE_SECT : 5  ; // 20 : 16 
    __IO uint32_t CONFIG_CYCLE_OF_ERASE_CHIP : 8  ; // 28 : 21 
    __IO uint32_t CONFIG_CYCLE_OF_LATENCY    : 3  ; // 31 : 29 
} EFLASH_WCTC2_FIELD_T;

typedef struct
{
    __IO uint32_t CONFIG_SECTOR_INDEX        : 7  ; // 6  : 0 
    __IO uint32_t RESERVED1                  : 17 ; // 23 : 7 
    __IO uint32_t CONFIG_NVR_SELECT          : 1  ; // 24 : 24 
    __IO uint32_t RESERVED0                  : 7  ; // 31 : 25 
} EFLASH_ECONF_FIELD_T;

typedef struct
{
    __IO uint32_t CMD_SECTOR_ERASE           : 1  ; // 0  : 0 
    __IO uint32_t RESERVED1                  : 15 ; // 15 : 1 
    __IO uint32_t CMD_CHIP_ERASE             : 1  ; // 16 : 16 
    __IO uint32_t RESERVED0                  : 15 ; // 31 : 17 
} EFLASH_ECOMM_FIELD_T;

typedef struct
{
    __IO uint32_t CONFIG_DEEP_STANDBY        : 1  ; // 0  : 0 
    __IO uint32_t RESERVED3                  : 3  ; // 3  : 1 
    __IO uint32_t CONFIG_CLK1M_DIVISOR       : 4  ; // 7  : 4 
    __IO uint32_t CONFIG_CLK1K_DIVISOR       : 5  ; // 12 : 8 
    __IO uint32_t RESERVED2                  : 3  ; // 15 : 13 
    __IO uint32_t STAT_PROGRAM_BUSY          : 1  ; // 16 : 16 
    __IO uint32_t RESERVED1                  : 1  ; // 17 : 17 
    __IO uint32_t STAT_ERASE_BUSY            : 1  ; // 18 : 18 
    __IO uint32_t RESERVED0                  : 13 ; // 31 : 19 
} EFLASH_MCR_FIELD_T;

typedef struct
{
    __IO uint32_t RESERVED0                  : 32 ; // 31 : 0 
} EFLASH_NVR_PROT_FIELD_T;

// Register Map Structure Definition
typedef struct
{
    union 
    { 
        __IO  uint32_t RCTC                ; // 0x0000
        EFLASH_RCTC_FIELD_T RCTC_F         ;
    };

    union 
    { 
        __IO  uint32_t WCTC1               ; // 0x0004
        EFLASH_WCTC1_FIELD_T WCTC1_F       ;
    };

    union 
    { 
        __IO  uint32_t WCTC2               ; // 0x0008
        EFLASH_WCTC2_FIELD_T WCTC2_F       ;
    };

    union 
    { 
        __IO  uint32_t ECONF               ; // 0x000C
        EFLASH_ECONF_FIELD_T ECONF_F       ;
    };

    union 
    { 
        __IO  uint32_t ECOMM               ; // 0x0010
        EFLASH_ECOMM_FIELD_T ECOMM_F       ;
    };

    union 
    { 
        __IO  uint32_t MCR                 ; // 0x0014
        EFLASH_MCR_FIELD_T MCR_F           ;
    };

    uint32_t RESERVED0[57]                  ;

    union 
    { 
        __IO  uint32_t NVR_PROT            ; // 0x00FC
        EFLASH_NVR_PROT_FIELD_T NVR_PROT_F ;
    };

} EFLASH_REG_TypeDef;

#endif
