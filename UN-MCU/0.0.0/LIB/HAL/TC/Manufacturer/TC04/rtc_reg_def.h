//----------------------------------------------------------------------
//         COPYRIGHT (C) 2022 TINYCHIP SEMICONDUCTOR                    
    //              CONFIDENTIAL & ALL RIGHTS RESERVED                      
//----------------------------------------------------------------------
// File name      : rtc_reg_def.h                                       
// Author         : mfpan                                               
// E-Mail         : mfpan@tinychip.com.cn                               
//----------------------------------------------------------------------
// Description    :                                                     
// Register Header File of RTC                                       
//----------------------------------------------------------------------
// Reversion History:                                                   
// 2022-10-21 17:24:13 -- automatically generated by reg_gen.pl Revision 1.11          
//----------------------------------------------------------------------

#ifndef   RTC_DEF_H__
#define   RTC_DEF_H__

// Register Offset Macro Definition
#define RTC_RTC_CTRL_0_OFFSET                                   0x0000
#define RTC_RTC_CTRL_1_OFFSET                                   0x0004
#define RTC_RTC_CTRL_2_OFFSET                                   0x0008
#define RTC_RTC_LOCK_OFFSET                                     0x000C
#define RTC_RTC_STATUS_OFFSET                                   0x0010
#define RTC_RTC_IMR_OFFSET                                      0x0014
#define RTC_RTC_ICR_OFFSET                                      0x0018
#define RTC_RTC_ISR_OFFSET                                      0x001C
#define RTC_RTC_IRSR_OFFSET                                     0x0020

// Register Address Macro Definition
#define RTC_RTC_CTRL_0_ADDR                                     ( RTC_BASE_ADDR + RTC_RTC_CTRL_0_OFFSET)
#define RTC_RTC_CTRL_1_ADDR                                     ( RTC_BASE_ADDR + RTC_RTC_CTRL_1_OFFSET)
#define RTC_RTC_CTRL_2_ADDR                                     ( RTC_BASE_ADDR + RTC_RTC_CTRL_2_OFFSET)
#define RTC_RTC_LOCK_ADDR                                       ( RTC_BASE_ADDR + RTC_RTC_LOCK_OFFSET)
#define RTC_RTC_STATUS_ADDR                                     ( RTC_BASE_ADDR + RTC_RTC_STATUS_OFFSET)
#define RTC_RTC_IMR_ADDR                                        ( RTC_BASE_ADDR + RTC_RTC_IMR_OFFSET)
#define RTC_RTC_ICR_ADDR                                        ( RTC_BASE_ADDR + RTC_RTC_ICR_OFFSET)
#define RTC_RTC_ISR_ADDR                                        ( RTC_BASE_ADDR + RTC_RTC_ISR_OFFSET)
#define RTC_RTC_IRSR_ADDR                                       ( RTC_BASE_ADDR + RTC_RTC_IRSR_OFFSET)

// Register Field Macro Definition
#define RTC_RTC_CTRL_0_SW_WAVE_DIV_SHIFT                       8
#define RTC_RTC_CTRL_0_SW_WAVE_DIV_MASK                        0x00000F00
#define RTC_RTC_CTRL_0_SW_WAVE_DIV_SET(n)                      (((uint32_t)(n) << 8  ) & 0x00000F00)
#define RTC_RTC_CTRL_0_SW_WAVE_DIV_CLR                         0xFFFFF0FF

#define RTC_RTC_CTRL_0_SW_WAVE_TEST_EN_SHIFT                   7
#define RTC_RTC_CTRL_0_SW_WAVE_TEST_EN_MASK                    0x00000080
#define RTC_RTC_CTRL_0_SW_WAVE_TEST_EN_SET(n)                  (((uint32_t)(n) << 7  ) & 0x00000080)
#define RTC_RTC_CTRL_0_SW_WAVE_TEST_EN_CLR                     0xFFFFFF7F

#define RTC_RTC_CTRL_0_SW_WAVE_EN_SHIFT                        6
#define RTC_RTC_CTRL_0_SW_WAVE_EN_MASK                         0x00000040
#define RTC_RTC_CTRL_0_SW_WAVE_EN_SET(n)                       (((uint32_t)(n) << 6  ) & 0x00000040)
#define RTC_RTC_CTRL_0_SW_WAVE_EN_CLR                          0xFFFFFFBF

#define RTC_RTC_CTRL_0_RTC_TRIG_EN_2_SHIFT                     5
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_2_MASK                      0x00000020
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_2_SET(n)                    (((uint32_t)(n) << 5  ) & 0x00000020)
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_2_CLR                       0xFFFFFFDF

#define RTC_RTC_CTRL_0_RTC_TRIG_EN_1_SHIFT                     4
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_1_MASK                      0x00000010
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_1_SET(n)                    (((uint32_t)(n) << 4  ) & 0x00000010)
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_1_CLR                       0xFFFFFFEF

#define RTC_RTC_CTRL_0_RTC_TRIG_EN_0_SHIFT                     3
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_0_MASK                      0x00000008
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_0_SET(n)                    (((uint32_t)(n) << 3  ) & 0x00000008)
#define RTC_RTC_CTRL_0_RTC_TRIG_EN_0_CLR                       0xFFFFFFF7

#define RTC_RTC_CTRL_0_RTC_LOAD_NOW_SHIFT                      2
#define RTC_RTC_CTRL_0_RTC_LOAD_NOW_MASK                       0x00000004
#define RTC_RTC_CTRL_0_RTC_LOAD_NOW_SET(n)                     (((uint32_t)(n) << 2  ) & 0x00000004)
#define RTC_RTC_CTRL_0_RTC_LOAD_NOW_CLR                        0xFFFFFFFB

#define RTC_RTC_CTRL_0_RTC_LOAD_SHIFT                          1
#define RTC_RTC_CTRL_0_RTC_LOAD_MASK                           0x00000002
#define RTC_RTC_CTRL_0_RTC_LOAD_SET(n)                         (((uint32_t)(n) << 1  ) & 0x00000002)
#define RTC_RTC_CTRL_0_RTC_LOAD_CLR                            0xFFFFFFFD

#define RTC_RTC_CTRL_0_RTC_HOLD_SHIFT                          0
#define RTC_RTC_CTRL_0_RTC_HOLD_MASK                           0x00000001
#define RTC_RTC_CTRL_0_RTC_HOLD_SET(n)                         (((uint32_t)(n) << 0  ) & 0x00000001)
#define RTC_RTC_CTRL_0_RTC_HOLD_CLR                            0xFFFFFFFE

#define RTC_RTC_CTRL_1_RTC_TRIG_NUM_1_SHIFT                    16
#define RTC_RTC_CTRL_1_RTC_TRIG_NUM_1_MASK                     0xFFFF0000
#define RTC_RTC_CTRL_1_RTC_TRIG_NUM_1_SET(n)                   (((uint32_t)(n) << 16 ) & 0xFFFF0000)
#define RTC_RTC_CTRL_1_RTC_TRIG_NUM_1_CLR                      0x0000FFFF

#define RTC_RTC_CTRL_1_RTC_TRIG_NUM_0_SHIFT                    0
#define RTC_RTC_CTRL_1_RTC_TRIG_NUM_0_MASK                     0x0000FFFF
#define RTC_RTC_CTRL_1_RTC_TRIG_NUM_0_SET(n)                   (((uint32_t)(n) << 0  ) & 0x0000FFFF)
#define RTC_RTC_CTRL_1_RTC_TRIG_NUM_0_CLR                      0xFFFF0000

#define RTC_RTC_CTRL_2_SW_RTC_CNT_SHIFT                        16
#define RTC_RTC_CTRL_2_SW_RTC_CNT_MASK                         0xFFFF0000
#define RTC_RTC_CTRL_2_SW_RTC_CNT_SET(n)                       (((uint32_t)(n) << 16 ) & 0xFFFF0000)
#define RTC_RTC_CTRL_2_SW_RTC_CNT_CLR                          0x0000FFFF

#define RTC_RTC_CTRL_2_RTC_TRIG_NUM_2_SHIFT                    0
#define RTC_RTC_CTRL_2_RTC_TRIG_NUM_2_MASK                     0x0000FFFF
#define RTC_RTC_CTRL_2_RTC_TRIG_NUM_2_SET(n)                   (((uint32_t)(n) << 0  ) & 0x0000FFFF)
#define RTC_RTC_CTRL_2_RTC_TRIG_NUM_2_CLR                      0xFFFF0000

#define RTC_RTC_LOCK_RTC_LOCK_SHIFT                            0
#define RTC_RTC_LOCK_RTC_LOCK_MASK                             0x00000001
#define RTC_RTC_LOCK_RTC_LOCK_SET(n)                           (((uint32_t)(n) << 0  ) & 0x00000001)
#define RTC_RTC_LOCK_RTC_LOCK_CLR                              0xFFFFFFFE

#define RTC_RTC_STATUS_RTC_CNT_SHIFT                           0
#define RTC_RTC_STATUS_RTC_CNT_MASK                            0x0000FFFF
#define RTC_RTC_STATUS_RTC_CNT_SET(n)                          (((uint32_t)(n) << 0  ) & 0x0000FFFF)
#define RTC_RTC_STATUS_RTC_CNT_CLR                             0xFFFF0000

#define RTC_RTC_IMR_RTC_IMR_SHIFT                              0
#define RTC_RTC_IMR_RTC_IMR_MASK                               0x0000000F
#define RTC_RTC_IMR_RTC_IMR_SET(n)                             (((uint32_t)(n) << 0  ) & 0x0000000F)
#define RTC_RTC_IMR_RTC_IMR_CLR                                0xFFFFFFF0

#define RTC_RTC_ICR_RTC_ICR_SHIFT                              0
#define RTC_RTC_ICR_RTC_ICR_MASK                               0x0000000F
#define RTC_RTC_ICR_RTC_ICR_SET(n)                             (((uint32_t)(n) << 0  ) & 0x0000000F)
#define RTC_RTC_ICR_RTC_ICR_CLR                                0xFFFFFFF0

#define RTC_RTC_ISR_RTC_ISR_SHIFT                              0
#define RTC_RTC_ISR_RTC_ISR_MASK                               0x0000000F
#define RTC_RTC_ISR_RTC_ISR_SET(n)                             (((uint32_t)(n) << 0  ) & 0x0000000F)
#define RTC_RTC_ISR_RTC_ISR_CLR                                0xFFFFFFF0

#define RTC_RTC_IRSR_RTC_IRSR_SHIFT                            0
#define RTC_RTC_IRSR_RTC_IRSR_MASK                             0x0000000F
#define RTC_RTC_IRSR_RTC_IRSR_SET(n)                           (((uint32_t)(n) << 0  ) & 0x0000000F)
#define RTC_RTC_IRSR_RTC_IRSR_CLR                              0xFFFFFFF0

// Register Structure Definition
typedef struct
{
    __IO uint32_t RTC_HOLD        : 1  ; // 0  : 0 
    __IO uint32_t RTC_LOAD        : 1  ; // 1  : 1 
    __IO uint32_t RTC_LOAD_NOW    : 1  ; // 2  : 2 
    __IO uint32_t RTC_TRIG_EN_0   : 1  ; // 3  : 3 
    __IO uint32_t RTC_TRIG_EN_1   : 1  ; // 4  : 4 
    __IO uint32_t RTC_TRIG_EN_2   : 1  ; // 5  : 5 
    __IO uint32_t SW_WAVE_EN      : 1  ; // 6  : 6 
    __IO uint32_t SW_WAVE_TEST_EN : 1  ; // 7  : 7 
    __IO uint32_t SW_WAVE_DIV     : 4  ; // 11 : 8 
    __IO uint32_t RESERVED0       : 20 ; // 31 : 12 
} RTC_RTC_CTRL_0_FIELD_T;

typedef struct
{
    __IO uint32_t RTC_TRIG_NUM_0  : 16 ; // 15 : 0 
    __IO uint32_t RTC_TRIG_NUM_1  : 16 ; // 31 : 16 
} RTC_RTC_CTRL_1_FIELD_T;

typedef struct
{
    __IO uint32_t RTC_TRIG_NUM_2  : 16 ; // 15 : 0 
    __IO uint32_t SW_RTC_CNT      : 16 ; // 31 : 16 
} RTC_RTC_CTRL_2_FIELD_T;

typedef struct
{
    __IO uint32_t RTC_LOCK        : 1  ; // 0  : 0 
    __IO uint32_t RESERVED0       : 31 ; // 31 : 1 
} RTC_RTC_LOCK_FIELD_T;

typedef struct
{
    __IO uint32_t RTC_CNT         : 16 ; // 15 : 0 
    __IO uint32_t RESERVED0       : 16 ; // 31 : 16 
} RTC_RTC_STATUS_FIELD_T;

typedef struct
{
    __IO uint32_t RTC_IMR         : 4  ; // 3  : 0 
    __IO uint32_t RESERVED0       : 28 ; // 31 : 4 
} RTC_RTC_IMR_FIELD_T;

typedef struct
{
    __IO uint32_t RTC_ICR         : 4  ; // 3  : 0 
    __IO uint32_t RESERVED0       : 28 ; // 31 : 4 
} RTC_RTC_ICR_FIELD_T;

typedef struct
{
    __IO uint32_t RTC_ISR         : 4  ; // 3  : 0 
    __IO uint32_t RESERVED0       : 28 ; // 31 : 4 
} RTC_RTC_ISR_FIELD_T;

typedef struct
{
    __IO uint32_t RTC_IRSR        : 4  ; // 3  : 0 
    __IO uint32_t RESERVED0       : 28 ; // 31 : 4 
} RTC_RTC_IRSR_FIELD_T;

// Register Map Structure Definition
typedef struct
{
    union 
    { 
        __IO  uint32_t RTC_CTRL_0              ; // 0x0000
        RTC_RTC_CTRL_0_FIELD_T RTC_CTRL_0_F    ;
    };

    union 
    { 
        __IO  uint32_t RTC_CTRL_1              ; // 0x0004
        RTC_RTC_CTRL_1_FIELD_T RTC_CTRL_1_F    ;
    };

    union 
    { 
        __IO  uint32_t RTC_CTRL_2              ; // 0x0008
        RTC_RTC_CTRL_2_FIELD_T RTC_CTRL_2_F    ;
    };

    union 
    { 
        __IO  uint32_t RTC_LOCK                ; // 0x000C
        RTC_RTC_LOCK_FIELD_T RTC_LOCK_F        ;
    };

    union 
    { 
        __IO  uint32_t RTC_STATUS              ; // 0x0010
        RTC_RTC_STATUS_FIELD_T RTC_STATUS_F    ;
    };

    union 
    { 
        __IO  uint32_t RTC_IMR                 ; // 0x0014
        RTC_RTC_IMR_FIELD_T RTC_IMR_F          ;
    };

    union 
    { 
        __IO  uint32_t RTC_ICR                 ; // 0x0018
        RTC_RTC_ICR_FIELD_T RTC_ICR_F          ;
    };

    union 
    { 
        __IO  uint32_t RTC_ISR                 ; // 0x001C
        RTC_RTC_ISR_FIELD_T RTC_ISR_F          ;
    };

    union 
    { 
        __IO  uint32_t RTC_IRSR                ; // 0x0020
        RTC_RTC_IRSR_FIELD_T RTC_IRSR_F        ;
    };

} RTC_REG_TypeDef;

#endif
