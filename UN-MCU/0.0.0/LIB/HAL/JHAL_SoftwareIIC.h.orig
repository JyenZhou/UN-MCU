#ifndef _JHAL_I2CSFX_H
#define _JHAL_I2CSFX_H

#include "HAL\JHAL_GPIO.h"


/*模拟IIC 使用需要定义全局的 JHAL_I2CSF_Number
 使用的id要小于定义的JHAL_I2CSF_Number  这个id是数组下标 从0开始

 */


typedef enum
{
//标准的
    JHAL_I2CSF_Device_Standard=0,
//对于TEA5767
    JHAL_I2CSF_Device_TEA5767

} JHAL_I2CSF_Device_Type;



typedef struct
{
/* 这个是延时系数   里面单位是us为基准 要是降低速率可以修改这里值  注意IO有翻转时间的间隔太小可能导致占空比不对 采用边沿触发时钟的IIC是可以容忍的 这个目前没有做校准
  STM32 64M逻辑分析仪对应频率(写的时候频率比较低，读的时候频率比较高,0是开漏读取sht3x不行的) 
	0: 125-142K
  1: 91-111K
	5:43-61K
	10:25-37K
	15：19-27K
	50：6-9K
	*/
	u8 delayMultiple;
    JHAL_IO_Port sclPort;
    u8  sclPin;
    JHAL_IO_Port sdaPort;
    u8  sdaPin;
    // 器件地址的写地址 如果是器8位需要左移一位再传进来
    u16 slaveAddress;
    JHAL_I2CSF_Device_Type deviceType;
//IO是否推挽模式 否则开漏
    bool isIO_Mode_PP:1;

} JHAL_I2CSF;



//初始化模拟的IIC  id0 开始
void JHAL_i2csfOpen( JHAL_I2CSF *init );
/*devAddress 是器件地址  写的时候*/

//只有器件地址的操作
//发送/读取  一个寄存器中N个数据
bool  JHAL_i2csfTransmit(JHAL_I2CSF *handle,  uint8_t *pData, u8 dataSize);
bool JHAL_i2csfReceice(JHAL_I2CSF  * config, u8* memData,u8 memLength,bool isStop, u8 *readDataBuff, u8 dataSize);



//器件地址+寄存器地址的操作
//从往指定寄存器写一些数据
bool JHAL_i2csfMemWrite(JHAL_I2CSF *handle, u16 memAddress,bool memSizeIs16,  u8 *pData,  u8 dataSize);
  //封装一个常用的读8/16位器件地址的方法（内部默认不调用 stop  一般可以兼容时序上要stop的  内部不会把stop当做重要标志而是依靠寄存器地址 ）
bool JHAL_i2csfMemRead(JHAL_I2CSF *handle, u16 memAddress,bool memSizeIs16, u8 *pData, u8 dataSize);



#endif

